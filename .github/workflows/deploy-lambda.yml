name: Deploy AWS Lambda with CDK

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - master

env:
  AWS_REGION: us-east-1  # Change to your region
  ECR_REPOSITORY_PREFIX: lambda  # Prefix for your ECR repositories
  ACCOUNT_ID: 905418022647  # Change to your account ID
  GITHUB_ROLE_NAME: GithubActionOIDCRole  # Change to your role name

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest

    steps:
      # Checkout repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Setup Node.js for CDK
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      # Install AWS CDK
      - name: Install AWS CDK
        run: npm install -g aws-cdk

      # Install Dependencies
      - name: Install Dependencies
        working-directory: cdk
        run: npm install

      # Configure AWS Credentials (OIDC-based authentication)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.GITHUB_ROLE_NAME }}  # Replace with your role ARN
          aws-region: ${{ env.AWS_REGION }}

      # Determine ENV based on branch
      - name: Set Environment
        id: set-env
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/master" ]]; then
            echo "ENV=prod" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "ENV=dev" >> $GITHUB_OUTPUT
          else
            echo "ENV=dev" >> $GITHUB_OUTPUT  # Default to dev
          fi

      # bootstrap CDK
      - name: CDK Bootstrap
        working-directory: cdk
        run: cdk bootstrap aws://${{env.ACCOUNT_ID}}/${{env.AWS_REGION}}

      # Synthesize CloudFormation template
      - name: CDK Synth
        env:
          ENV: ${{ steps.set-env.outputs.ENV }}
        working-directory: cdk
        run: |
          export ENV=$ENV  # Set ENV in the shell (so that process.env.ENV is set)
          cdk synth LambdaStack

      # Deploy CDK Stack
      - name: CDK Deploy
        env:
          ENV: ${{ steps.set-env.outputs.ENV }}
        working-directory: cdk
        run: |
          export ENV=$ENV  # Set ENV in the shell (so that process.env.ENV is set)
          cdk deploy LambdaStack --require-approval never
