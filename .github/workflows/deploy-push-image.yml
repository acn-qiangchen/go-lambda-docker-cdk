name: Build and Push Docker Images to ECR

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - main

env:
  AWS_REGION: us-east-1  # Change to your region
  ECR_REPOSITORY_PREFIX: my-app  # Prefix for your ECR repositories
  ACCOUNT_ID: 992382474961  # Change to your account ID
  GITHUB_ROLE_NAME: GithubActionOIDCRole  # Change to your role name


jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write    # Required for OIDC
      contents: read     # Required for checkout

    strategy:
      matrix:
        image:
          - name: image1
            path: lambda/image1
            dockerfile: Dockerfile
          - name: image2
            path: lambda/image2
            dockerfile: Dockerfile
          - name: image3
            path: lambda/image3
            dockerfile: Dockerfile
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ env.ACCOUNT_ID }}:role/${{ env.GITHUB_ROLE_NAME }}  # Replace with your role ARN
          aws-region: ${{ env.AWS_REGION }}
          role-duration-seconds: 3600  # Duration of the assumed role (1 hour)

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get ECR Registry
        id: get-registry
        run: |
          REGISTRY=$(aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin | grep -o 'https://.*' | head -n1 | sed 's/https:\/\///')
          echo "registry=$REGISTRY" >> $GITHUB_OUTPUT

      - name: Build, Tag, and Push Image to ECR
        env:
          ECR_REGISTRY: ${{ steps.get-registry.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY_PREFIX }}-${{ matrix.image.name }}
          IMAGE_TAG: ${{ github.sha }}
        working-directory: ${{ matrix.image.path }}
        run: |
          # Build the image
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f ${{ matrix.image.dockerfile }} .
          
          # Push the image
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          # Tag and push with 'latest'
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest